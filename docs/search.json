[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marco Smolla. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Smolla M (2023). complexNet: Complex Network Generation. https://marcosmolla.github.io/complexNet/, https://github.com/marcosmolla/complexNet.","code":"@Manual{,   title = {complexNet: Complex Network Generation},   author = {Marco Smolla},   year = {2023},   note = {https://marcosmolla.github.io/complexNet/, https://github.com/marcosmolla/complexNet}, }"},{"path":[]},{"path":"/index.html","id":"complexnet-","dir":"","previous_headings":"","what":"complexNet","title":"An R package for complex networks","text":"complexNet provides functions easily generate iterate complex networks. networks rely socially inherited random connections members population, presented Ilany & Akcay (2016). modelling framework shown generate realistic networks wide range different clustering, density, average path length. Smolla & Akcay (2019) used algorithms generate networks dynamically evolve.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R package for complex networks","text":"","code":"# Install release version from CRAN install.packages(\"complexNet\")  # Install development version from GitHub devtools::install_github(\"marcosmolla/complexNet\")"},{"path":"/index.html","id":"what-are-complex-networks","dir":"","previous_headings":"","what":"What are complex networks?","title":"An R package for complex networks","text":"general idea complex networks (sense package) individual group set parameters determines probability share edge certain subsets population. common version differentiates three subsets: parent, direct network neighbours parent, everyone else. probability form connection parent given probability pb. Similarly, pn probability connection neighbours parent, pr probability connect anyone else. probabilities regard different subsets population, add 1. far, algorithm working asexual populations (single parent) extended also include two parents version future. Schematic complex networks schematic depicts new individual joins population (one individual removed). case, shares link parent connect parent’s neighbours probability pn, individual probability pr.","code":""},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"An R package for complex networks","text":"generate complex network, use make_bnr() function. need set number individuals network n, linking probabilities pb, pn, pr (see example ). set new network set np=c(0,0), means ID set newborn parent . Take look vignette (Articles top) see networks can iterated simulate network dynamics parameter evolution.","code":"# Load library library(complexNet)  # Create adjacency matrix for a complex network ADJM <- make_bnr(n = 10, np = c(0,0), pb = 1, pn = .2, pr = .02)  # Load igraph library library(igraph)  # Convert adjacency matrix to an igraph network G <- graph_from_adjacency_matrix(ADJM)  # Plot network plot(G)"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"An R package for complex networks","text":"example plot networks generated make_bnr() different social inheritance, pn, random linking, pr, probabilities. linking probabilities increase, networks become connected. Example figure following code generates similar figure one shown .","code":"# Load library library(complexNet) library(igraph)  par(mfrow=c(3,3), mar=rep(1.2,4)) apply(X = expand.grid(c(.1,.3,.5), c(0.01,0.03,0.05)), 1, function(p) {  # Create adjacency matrix for a complex network  ADJM <- make_bnr(n = 50, np = c(0,0), pb = 1, pn = p[1], pr = p[2])  # Convert adjacency matrix to an igraph network  G <- graph_from_adjacency_matrix(ADJM)  # Calculate node degree centrality  deg <- degree(G)  # Select node colour based on its degree centrality  V(G)$color <- heat.colors(rev = T, n = 25)[deg+1]  # Plot network  plot(G,       main=paste(\"p_n: \",p[1],\", p_r:\",p[2], sep=\"\"),       vertex.label=NA,       vertex.size=10,       edge.arrow.size=0,       vertex.color=V(G)$color) })"},{"path":"/index.html","id":"out-there","dir":"","previous_headings":"","what":"Out there","title":"An R package for complex networks","text":"list articles use complex networks: Ilany, ., & Akcay, E. (2016). Social inheritance can explain structure animal social networks. Nature Communications, 7(May), 1–23. https://doi.org/10.1101/026120 Ilany, ., & Akçay, E. (2016). Personality Social Networks: Generative Model Approach. Integrative Comparative Biology, 56(6), 1197–1205. https://doi.org/10.1093/icb/icw068 Smolla, M., & Akçay, E. (2019). Cultural selection shapes network structure. Science Advances, 5(8), eaaw0609. https://doi.org/10.1126/sciadv.aaw0609","code":""},{"path":"/index.html","id":"how-to-cite-this-package","dir":"","previous_headings":"","what":"How to cite this package?","title":"An R package for complex networks","text":"","code":"> citation(\"complexNet\")  To cite package ‘complexNet’ in publications use:    Smolla M (2022). complexNet: Complex Network Generation.   R package version 0.2.0.   https://CRAN.R-project.org/package=complexNet  A BibTeX entry for LaTeX users is    @Manual{,     title = {complexNet: Complex Network Generation},     author = {Marco Smolla},     year = {2022},     note = {R package version 0.2.0},     url = {https://CRAN.R-project.org/package=complexNet},   }"},{"path":"/reference/avg_degree_bnr.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected average degree of BNR networks — avg_degree_bnr","title":"Expected average degree of BNR networks — avg_degree_bnr","text":"Calculates expected average degree BNR network (single parent ) based approximation Ilany Akcay, 2016 (see details).","code":""},{"path":"/reference/avg_degree_bnr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected average degree of BNR networks — avg_degree_bnr","text":"","code":"avg_degree_bnr(n, pb, pn, pr)  # S4 method for numeric,numeric,numeric,numeric avg_degree_bnr(n, pb, pn, pr)"},{"path":"/reference/avg_degree_bnr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expected average degree of BNR networks — avg_degree_bnr","text":"n Number nodes network pb Probability connect parent (default 1) pn Probability connect neighbour parent(s) pr Probability connect individuals connected ","code":""},{"path":"/reference/avg_degree_bnr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expected average degree of BNR networks — avg_degree_bnr","text":"Returns expected average degree BNR network numeric value. value analytic result numeric approximation (compare examples ).","code":""},{"path":"/reference/avg_degree_bnr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Expected average degree of BNR networks — avg_degree_bnr","text":"expected average degree \\(\\bar{d}\\) calculated $$ \\bar{d} = \\frac{(N-1)(p_b + (N-2)p_r)}{N-1-(N-2)(p_n - p_r)} $$","code":""},{"path":"/reference/avg_degree_bnr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Expected average degree of BNR networks — avg_degree_bnr","text":"Ilany, ., Akçay, E. (2016). Personality Social Networks: Generative Model Approach. Integrative Comparative Biology, 56(6), 1197–1205. doi:10.1093/icb/icw068","code":""},{"path":"/reference/avg_degree_bnr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expected average degree of BNR networks — avg_degree_bnr","text":"","code":"# Expected degree avg_degree_bnr(n = 100, pb = 1, pn = .2, pr = .02) #> [1] 3.60177 # Compare to simulated network with identical parameters adjm <- make_bnr(n = 100, np = c(0,0), pb = 1, pn = .2, pr = .02) mean(adjm) * 100 #> [1] 3.58"},{"path":"/reference/init_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialising a random graph — init_graph","title":"Initialising a random graph — init_graph","text":"init_graph takes number nodes (n) average degree (deg) generate random graph.","code":""},{"path":"/reference/init_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialising a random graph — init_graph","text":"","code":"init_graph(n, deg)  # S4 method for numeric,numeric init_graph(n, deg)"},{"path":"/reference/init_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialising a random graph — init_graph","text":"n Number nodes network deg Average degree network","code":""},{"path":"/reference/init_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialising a random graph — init_graph","text":"Returns unweighted (binary) adjacency matrix, cell represents presence (1) absence (0) interaction row column individual.","code":""},{"path":"/reference/init_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialising a random graph — init_graph","text":"","code":"init_graph(n = 10, deg = 4) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    1    1    1    0    1    1     0 #>  [2,]    0    0    1    1    0    0    1    0    0     1 #>  [3,]    0    1    0    0    1    0    0    1    0     0 #>  [4,]    1    1    0    0    1    1    1    0    0     1 #>  [5,]    1    0    1    1    0    1    0    1    0     1 #>  [6,]    1    0    0    1    1    0    1    0    1     0 #>  [7,]    0    1    0    1    0    1    0    1    1     1 #>  [8,]    1    0    1    0    1    0    1    0    1     0 #>  [9,]    1    0    0    0    0    1    1    1    0     1 #> [10,]    0    1    0    1    1    0    1    0    1     0"},{"path":"/reference/iterate_bnr.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterating a bnr network — iterate_bnr","title":"Iterating a bnr network — iterate_bnr","text":"Iterating bnr network","code":""},{"path":"/reference/iterate_bnr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterating a bnr network — iterate_bnr","text":"","code":"iterate_bnr(adjm, np, pb, pn, pr)  # S4 method for matrix,numeric,numeric,numeric,numeric iterate_bnr(adjm, np, pb, pn, pr)"},{"path":"/reference/iterate_bnr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterating a bnr network — iterate_bnr","text":"adjm Adjacency matrix np numeric vector setting ids newborn (.e. individual replaced new one) parent(s). Length 2 3. want randomly select id newborn (first value) parents (second third value), simply use c(0,0) c(0,0,0). one parent, focal individual connects parent probability pb. two parent values, individual connects two parents probability pb. pb Probability connect parent. Default 1. pn Probability connect neighbour parent(s) pr Probability connect individuals connected parent","code":""},{"path":"/reference/iterate_bnr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterating a bnr network — iterate_bnr","text":"Returns iterated version supplied adjacency matrix numeric matrix.","code":""},{"path":"/reference/iterate_bnr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iterating a bnr network — iterate_bnr","text":"just want iterate graph can use np=c(0,0) np=c(0,0,0). However, function return ids newborn parent(s). want keep track ids changed, provide input function.","code":""},{"path":"/reference/iterate_bnr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterating a bnr network — iterate_bnr","text":"","code":"# Set up linking parameters: pb <- 1 pn <- 0.2 pr <- 0.01 # Generate a network based on these parameters adjm_t0 <- make_bnr(n = 100, np=c(0,0), pb = pb, pn = pn, pr = pr) # Iterate the network adjm_t1 <- iterate_bnr(adjm = adjm_t0, np=c(0,0), pb = pb, pn = pn, pr = pr)"},{"path":"/reference/iterate_kp.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterating a kp network — iterate_kp","title":"Iterating a kp network — iterate_kp","text":"Iterating kp network","code":""},{"path":"/reference/iterate_kp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterating a kp network — iterate_kp","text":"","code":"iterate_kp(adjm, np, pb, k, p)  # S4 method for matrix,numeric,numeric,numeric,numeric iterate_kp(adjm, np, pb, k, p)"},{"path":"/reference/iterate_kp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterating a kp network — iterate_kp","text":"adjm Adjacency matrix np numeric vector setting ids newborn (.e. individual replaced new one) parent(s). Length 2 3. want randomly select id newborn (first value) parents (second third value), simply use c(0,0) c(0,0,0). one parent, focal individual connects parent probability pb. two parent values, individual connects two parents probability pb. pb Probability connect parent. Default 1. k Degree (number connections new individual form) p Maximum proportion k connections neighbours parent. complimentary k*(1-p) connections formed random individuals","code":""},{"path":"/reference/iterate_kp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterating a kp network — iterate_kp","text":"Returns iterated version supplied adjacency matrix numeric matrix.","code":""},{"path":"/reference/iterate_kp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iterating a kp network — iterate_kp","text":"just want iterate graph can use np=c(0,0) np=c(0,0,0). However, function return ids newborn parent(s). want keep track ids changed, provide input function.","code":""},{"path":"/reference/iterate_kp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterating a kp network — iterate_kp","text":"","code":"# Set up linking parameters: pb <- 1 k <- 4 p <- 0.2 # Generate a network based on these parameters adjm_t0 <- make_kp(n = 100, np=c(0,0), pb = pb, k = k, p = p) # Iterate the network adjm_t1 <- iterate_kp(adjm = adjm_t0, np=c(0,0), pb = pb, k = k, p = p)"},{"path":"/reference/make_bnr.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating a Pb, Pn, Pr network — make_bnr","title":"Generating a Pb, Pn, Pr network — make_bnr","text":"function takes adj.matrix (ADJM), probabilities connect parent(s), neighbours, randoms (PB, PN, PR), index parent (NULL, default, NPARENT number individuals randomly chosen parent), number parents (NPARENT, default 1).","code":""},{"path":"/reference/make_bnr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating a Pb, Pn, Pr network — make_bnr","text":"","code":"make_bnr(n, np, pb, pn, pr)  # S4 method for numeric,numeric,numeric,numeric,numeric make_bnr(n, np, pb, pn, pr)  # S4 method for numeric,numeric,missing,numeric,numeric make_bnr(n, np, pb, pn, pr)"},{"path":"/reference/make_bnr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating a Pb, Pn, Pr network — make_bnr","text":"n Number vertices (population size) np numeric vector setting ids newborn (.e. individual replaced new one) parent(s). Length 2 3. want randomly select id newborn (first value) parents (second third value), simply use c(0,0) c(0,0,0). pb Probability connect parent (default 1) pn Probability connect neighbour parent(s) pr Probability connect individuals connected parent","code":""},{"path":"/reference/make_bnr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating a Pb, Pn, Pr network — make_bnr","text":"Returns unweighted (binary) adjacency matrix, cell represents presence (1) absence (0) interaction row column individual.","code":""},{"path":"/reference/make_bnr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generating a Pb, Pn, Pr network — make_bnr","text":"important note , although three parameters (PB, PN, PR) probabilities, .e. values 0 1, value (say 0.2) means something different . , PB probability connect parent(s), .e. 1 two individuals. contrast, PN PR probabilities connect neighbours parent(s) random individuals. case small social neighbourhood parent(s) PR 0.2 mean connect large amount individuals remaining network. Therefore, important keep mind value (three) values important individual one isolation.","code":""},{"path":"/reference/make_bnr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating a Pb, Pn, Pr network — make_bnr","text":"","code":"make_bnr(n = 10, np = c(0,0), pb = 1, pn = .2, pr = .01) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    1    0    0    1    0    0    0    1     0 #>  [2,]    1    0    0    0    0    0    0    0    1     0 #>  [3,]    0    0    0    0    0    0    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    0     0 #>  [5,]    1    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    0     1 #>  [7,]    0    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     0 #>  [9,]    1    1    0    0    0    0    0    0    0     0 #> [10,]    0    0    0    0    0    1    0    0    0     0"},{"path":"/reference/make_kp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating a kp network — make_kp","title":"Generating a kp network — make_kp","text":"function ...","code":""},{"path":"/reference/make_kp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating a kp network — make_kp","text":"","code":"make_kp(n, np, pb, k, p)  # S4 method for numeric,numeric,numeric,numeric,numeric make_kp(n, np, pb, k, p)  # S4 method for numeric,numeric,missing,numeric,numeric make_kp(n, np, pb, k, p)"},{"path":"/reference/make_kp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating a kp network — make_kp","text":"n Number vertices (population size) np numeric vector setting ids newborn (.e. individual replaced new one) parent(s). Length 2 3. want randomly select id newborn (first value) parents (second third value), simply use c(0,0) c(0,0,0). pb Probability connect parent (default 1) k Degree (number connections new individual form) p Maximum proportion k connections neighbours parent. complimentary k*(1-p) connections formed random individuals","code":""},{"path":"/reference/make_kp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating a kp network — make_kp","text":"Returns unweighed (binary) adjacency matrix, cell represents presence (1) absence (0) interaction row column individual.","code":""},{"path":"/reference/make_kp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generating a kp network — make_kp","text":"important note ... P maximum value, say individual wants 10 connections P=0.5, .e. wants 5 connections neighbours parent parent 4 inherit 4.","code":""},{"path":"/reference/make_kp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating a kp network — make_kp","text":"","code":"make_kp(n = 10, np = c(0,0), pb = 1, k = 4, p = .5) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    1    0    1    1    0    0     1 #>  [2,]    0    0    1    0    0    1    1    1    0     0 #>  [3,]    0    1    0    1    0    0    1    0    1     0 #>  [4,]    1    0    1    0    1    0    0    0    1     0 #>  [5,]    0    0    0    1    0    1    1    1    0     1 #>  [6,]    1    1    0    0    1    0    1    0    0     1 #>  [7,]    1    1    1    0    1    1    0    0    0     0 #>  [8,]    0    1    0    0    1    0    0    0    0     1 #>  [9,]    0    0    1    1    0    0    0    0    0     0 #> [10,]    1    0    0    0    1    1    0    1    0     0"},{"path":"/news/index.html","id":"complexnet-020","dir":"Changelog","previous_headings":"","what":"complexNet 0.2.0","title":"complexNet 0.2.0","text":"CRAN release: 2022-11-10","code":""},{"path":"/news/index.html","id":"major-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"complexNet 0.2.0","text":"Adding two new functions (make_kp iterate_kp) allow generate iterate kp networks, k degree new individual aiming p proportion socially inherited links (1-p proportion random links).","code":""},{"path":"/news/index.html","id":"complexnet-010","dir":"Changelog","previous_headings":"","what":"complexNet 0.1.0","title":"complexNet 0.1.0","text":"CRAN release: 2021-03-31","code":""},{"path":"/news/index.html","id":"major-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"complexNet 0.1.0","text":"Initial release","code":""}]
